<%- include('../partials/headercode.ejs') %>
    <!-- Atharv -->

    <style>
        .search-container {
            background-color: #fff;

            border-radius: 5px;

        }

        .search-container input {

            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
        }

        .search-container input:focus {
            outline: none;
            border-color: #fff;

        }
    </style>

    <body>

        <!-- Layout wrapper -->
        <div class="layout-wrapper layout-content-navbar  ">
            <div class="layout-container">

                <!-- sidebar imported -->
                <%- include('../partials/sidebar.ejs') %>

                    <!-- Layout container -->
                    <div class="layout-page">

                        <!-- navbar imported -->
                        <%- include('../partials/navbar.ejs') %>

                            <!-- Content wrapper -->
                            <div class="content-wrapper">

                                <!-- Content -->

                                <div class="container-xxl flex-grow-1 container-p-y">

                                    <!-- Loader GIF -->
                                    <div id="loader"
                                        style="display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
                                        <div class="spinner-border spinner-border-lg text-primary" role="status"
                                            style="position: absolute; top: 50%; left: 50%;">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>

                                    <div class="row d-flex justify-content-between align-items-center m-0 p-0">
                                        <h4 class="col-md-7 fw-bold py-3 mb-1">Purchase Bill</h4>
                                        <div
                                            class="col-md-5 text-center mt-3 d-flex justify-content-around align-items-center p-0">
                                            <div>
                                                <div class="form-check form-check-inline mt-3">
                                                    <input class="form-check-input" type="radio" name="paymentMethod"
                                                        id="cashRadio" value="CASH" checked>
                                                    <label class="form-check-label" for="cashRadio">Cash</label>
                                                </div>
                                                <div class="form-check form-check-inline mt-3">
                                                    <input class="form-check-input" type="radio" name="paymentMethod"
                                                        id="creditRadio" value="CREDIT">
                                                    <label class="form-check-label" for="creditRadio">Credit</label>
                                                </div>
                                            </div>

                                            <div class="text-center mx-2">
                                                <a class="btn btn-primary btn-responsive" style="color: white;"
                                                    href="/new_vendor">+
                                                    Add Distributor</a>
                                            </div>
                                        </div>
                                    </div>

                                    <hr class="mb-4">

                                    <form>
                                        <div class="row">

                                            <div class="col-md-6">
                                                <div class="card mb-4">
                                                    <h5 class="card-header">Distributor Name</h5>
                                                    <div class="card-body has-validation" id="vendorname">
                                                        <select class="form-select" id="vendorselect" required>
                                                            <option value="default" selected>Select Distributor</option>
                                                            <%vendors.forEach(function(vendor) {%>
                                                                <option value="<%= vendor.vendor_id %>">
                                                                    <%= vendor.vendor_name %>
                                                                </option>
                                                                <%});%>
                                                        </select>
                                                        <div class="invalid-feedback">
                                                            Please select a distributor.
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="card mb-4 py-1">

                                                    <h6 class="card-header py-1" id="contact">Conatct: </h6>
                                                    <h6 class="card-header py-1" id="email">Email :</h6>
                                                    <h6 class="card-header py-1" id="dl_no">DL No. :</h6>
                                                    <h6 class="card-header py-1" id="gstin">GSTIN :</h6>
                                                    <h6 class="card-header py-1" id="address">Address :</h6>

                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <div class="card mb-4">
                                                    <h5 class="card-header">Distributor Invoice Number</h5>
                                                    <div class="card-body has-validation">
                                                        <input type="text" class="form-control" id="vendorinvoicenumber"
                                                            placeholder="Enter Invoice Number" required />
                                                        <div class="invalid-feedback">
                                                            Please enter invoice number.
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <div class="card mb-4">
                                                    <h5 class="card-header">Invoice Date </h5>

                                                    <div class="card-body has-validation">
                                                        <input class="form-control" type="date" id="html5-date-input"
                                                            id="invoiceDate" name="invoiceDate" required />
                                                        <div class="invalid-feedback">
                                                            Please select invoice date.
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                    </form>
                                    <hr>

                                    <div class="card">
                                        <h5 class="card-header">Match cart products with master</h5>
                                        <div class="card-body" id="inventoryData">
                                            <div class="card-datatable table-responsive text-nowrap"
                                                style="min-height: 50vh;" id="mappedDataTable">
                                                <div class="text-center my-3">
                                                    <h5 class="fw-bold">No data to display</h5>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row d-flex justify-content-evenly mt-4">

                                        <div class="d-flex row m-0 p-0">
                                            <h4 class="col-sm-7 fw-bold py-3 mb-2">Bill Summary</h4>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="card mb-4">
                                                <h5 class="card-header"> Total Gross (â‚¹)</h5>
                                                <div class="card-body">
                                                    <div class="has-validation">
                                                        <input type="number" class="form-control" id="totalGross"
                                                            readonly />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3" id="creditPeriodInputBox" style="display: none;">
                                            <div class="card mb-4">
                                                <div class="d-flex justify-content-between m-0 p-0">
                                                    <h5 class="card-header">Credit Period</h5>
                                                </div>
                                                <div class="card-body pt-0" id="creditPeriodInput">
                                                    <select class="form-select form-select">
                                                        <option value="0">0D</option>
                                                        <option value="10">10D</option>
                                                        <option value="15">15D</option>
                                                        <option value="30">30D</option>
                                                    </select>

                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3" id="lessDiscountBox">
                                            <div class="card mb-4">
                                                <div class="d-flex justify-content-between m-0 p-0">
                                                    <h5 class="card-header">Less Discount (â‚¹)</h5>
                                                </div>
                                                <div class="card-body pt-0">
                                                    <div class="input-group has-validation">
                                                        <input type="text" class="form-control" id="lessDiscount"
                                                            onkeypress="javascript: if (!/[0-9.]/.test(String.fromCharCode(event.charCode))) return false;"
                                                            name="lessDiscount" placeholder="Less Discount in (â‚¹)" />
                                                        <div class="invalid-feedback">
                                                            Less Discount cannot be greater than total amount
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="card mb-4">
                                                <div class="row m-0 p-0">
                                                    <h5 class="card-header">CR/DR (â‚¹) </h5>
                                                </div>
                                                <div class="card-body pt-0">
                                                    <div class="input-group has-validation">
                                                        <input type="text" class="form-control"
                                                            onkeypress="javascript: if (!/[-0-9]/.test(String.fromCharCode(event.charCode))) return false;"
                                                            id="creditAmt" placeholder="Enter CR/DR" />
                                                        <div class="invalid-feedback">
                                                            Credit Amount cannot be greater than subtotal
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="card mb-4">
                                                <h5 class="card-header"> Total Amount (â‚¹)</h5>
                                                <div class="card-body">
                                                    <div class="has-validation">
                                                        <input type="number" class="form-control" id="totalAmt"
                                                            readonly />
                                                        <div class="invalid-feedback">
                                                            Item cart empty cannot submit
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-check mt-3 d-flex justify-content-center align-items-center">
                                        <input class="form-check-input mx-1" type="checkbox" value="" id="defaultCheck1"
                                            checked>
                                        <label class="form-check-label mx-1" for="defaultCheck1">
                                            Disclaimer : Hereby I assure that product details given here is
                                            validated by this pharmacy .
                                        </label>
                                    </div>


                                    <!-- Button trigger modal -->
                                    <div class="text-center ms-2 my-3">
                                        <button type="submit" class="btn btn-primary btn-responsive"
                                            style="color: white;" id="uploadInventoryBtn">Upload Purchase Bill</button>
                                    </div>

                                    <!-- Modal -->
                                    <div class="modal fade " id="addProductModal" tabindex="-1"
                                        aria-labelledby="addProductModalLabel" aria-hidden="true">
                                        <div class="modal-dialog modal-lg p-0">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title my-2 align-middle" id="exampleModalLabel"
                                                        style="text-align: center;">ADD NEW PRODUCT</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                        aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body container">
                                                    <div class="mb-4">
                                                        <div class="row mb-3">
                                                            <label class="col-sm-4 col-form-label">Product Name</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group has-validation">
                                                                    <input type="text" class="form-control"
                                                                        id="modalProductName"
                                                                        placeholder="Type product name here.." required>
                                                                    <div class="invalid-feedback">
                                                                        Please enter a product name.
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="row mb-3">
                                                            <label class="col-sm-4 col-form-label">Mfg/Mkt</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group has-validation">
                                                                    <input type="text" class="form-control"
                                                                        id="modalBrandName"
                                                                        placeholder="Product manufacturer/marketer"
                                                                        required>
                                                                    <div class="invalid-feedback">
                                                                        Please enter mfg/mkt details.
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="row mb-3">
                                                            <label class="col-sm-4 col-form-label">Salt Comp.</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group has-validation">
                                                                    <input type="text" class="form-control"
                                                                        id="modalSalt"
                                                                        placeholder="Product salt composition" required>
                                                                    <div class="invalid-feedback">
                                                                        Please enter salt composition.
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <!-- Disabled temporarily -->
                                                        <!-- <div class="row mb-3">
                                                            <label class="col-sm-2 col-form-label"
                                                                for="basic-icon-default-address">Unit</label>

                                                            <div class="col-sm-2 text-center mx-0 p-0">
                                                                <p class="fs-4"></p>
                                                            </div>

                                                            <div class="col-sm-4 me-0">
                                                                <div class="input-group has-validation">
                                                                    <select class="form-select" id="primaryDropdown"
                                                                        name="primary"
                                                                        aria-label="Default select example" required>
                                                                        <option value="default" selected>Primary
                                                                        </option>
                                                                        <option value="STP">STP</option>
                                                                        <option value="AMP">AMP</option>
                                                                        <option value="BOX">BOX</option>
                                                                        <option value="BTL">BTL</option>
                                                                        <option value="PCS">PCS</option>
                                                                        <option value="TUBE">TUBE</option>
                                                                        <option value="DROP">DROP</option>
                                                                        <option value="DRSP">DRSP (Dry Syrup)</option>
                                                                        <option value="E/D">E/D (Eye Drop)</option>
                                                                        <option value="EAR/D">EAR/D (Ear Drop)</option>
                                                                        <option value="INJ">INJ (Injection)</option>
                                                                        <option value="INH">INH (Inhaler)</option>
                                                                    </select>
                                                                    <div class="invalid-feedback">
                                                                        Please select primary unit.
                                                                    </div>
                                                                </div>

                                                            </div>

                                                            <div class="col-sm-4 ms-0">
                                                                <div class="input-group has-validation">
                                                                    <select class="form-select" id="secondaryDropdown"
                                                                        name="secondary" required>
                                                                        <option value="default" selected>Secondary
                                                                        </option>
                                                                    </select>
                                                                    <div class="invalid-feedback">
                                                                        Please select secondary unit.
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </div>

                                                        <div class="row mb-3">
                                                            <label class="col-sm-4 col-form-label"
                                                                for="category">Category</label>
                                                            <div class="col-sm-8">
                                                                <div class="input-group has-validation">
                                                                    <select class="form-select" name="category"
                                                                        id="categorySelect" required>
                                                                        <option value="default" selected>Select
                                                                            Category
                                                                        </option>
                                                                    </select>
                                                                    <div class="invalid-feedback">
                                                                        Please select category.
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div> -->

                                                        <div class="text-center mx-2 my-4">
                                                            <a class="btn btn-primary btn-responsive" id="addProductBtn"
                                                                style="color: white;">Add</a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </div>
                    <!-- / Content -->

                    <div class="content-backdrop fade"></div>
            </div>
            <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>

        </div>
        <!-- / Layout wrapper -->

        <%- include('../partials/footercode.ejs') %>
            <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>


            <style>
                /* Custom CSS for mobile responsiveness */
                @media (max-width: 576px) {
                    .btn-responsive {
                        font-size: 13px;
                        /* Adjust the font size for mobile */
                        padding: 5px 10px;
                        /* Adjust padding for mobile */
                    }
                }
            </style>

            <script>
                function getBillSummary() {

                    mappedData = JSON.parse(sessionStorage.getItem('mappedData') || '[]');

                    if (mappedData.length != 0) {
                        var totalAmt = 0;
                        var totalGross = 0;
                        var totalGST = 0;

                        var lessDiscount = parseFloat($("#lessDiscount").val()) || 0;
                        var creditAmtInput = parseFloat($("#creditAmt").val()) || 0;

                        for (let i = 0; i < mappedData.length; i++) {
                            const mrp = parseFloat(mappedData[i].MRP);
                            const ptr = parseFloat(mappedData[i].PTR);
                            const gst = parseFloat(mappedData[i].GST);
                            const qty = parseInt(mappedData[i].Quantity);
                            const free = parseInt(mappedData[i].Free || 0);
                            const bulkDis = parseInt(mappedData[i].DiscountPct || 0);

                            // Calculate gross value
                            const grossValue = (ptr * qty * (1 - (bulkDis / 100)));
                            const gstValue = (grossValue * gst / 100);
                            const totalValue = grossValue + gstValue;
                            mappedData[i].grossValue = grossValue;
                            totalGross += parseFloat(grossValue);

                            // Calculate base price
                            const basePrice = calcuateBasePrice(mrp, ptr, gst, qty, free, bulkDis).toFixed(2);
                            mappedData[i].basePrice = basePrice;

                            // Save the updated mappedData back to session storage
                            sessionStorage.setItem('mappedData', JSON.stringify(mappedData));
                        }
                        var lessDiscountPercent = (lessDiscount / totalGross) * 100;

                        for (let i = 0; i < mappedData.length; i++) {
                            const grossValue = parseFloat(mappedData[i].grossValue);
                            const gst = parseFloat(mappedData[i].GST);

                            totalGST += (grossValue * (1 - lessDiscountPercent / 100)) * gst / 100;
                        }
                        $("#totalGross").val(totalGross.toFixed(2));

                        totalAmt = totalGross + totalGST - lessDiscount + creditAmtInput;
                        $("#totalAmt").val(totalAmt.toFixed(2));
                    }
                    else if (mappedData.length == 0) {
                        $("#totalGross").val(0);
                        $("#totalAmt").val(0);
                    }
                }

                // Ensure credit Amount is not greater than total Amount and not less than zero
                $('#creditAmt').on("input", function () {
                    var getTotalAmt = parseFloat($("#totalGross").val());
                    var creditAmtInput = parseFloat($(this).val());

                    if (Math.abs(creditAmtInput) > getTotalAmt) {
                        $('#creditAmt').addClass('is-invalid');
                        $('#creditAmt').focus();
                        $(this).val(getTotalAmt);
                    } else {
                        getBillSummary();
                        $('#creditAmt').removeClass('is-invalid');
                    }
                });

                // Ensure less discount is not greater than total Amount and not less than zero
                $('#lessDiscount').on("input", function () {
                    var getTotalAmt = parseFloat($("#totalGross").val());
                    var lessDiscountInput = parseFloat($(this).val());
                    console.log(getTotalAmt, lessDiscountInput)

                    if (lessDiscountInput > getTotalAmt) {
                        $('#lessDiscount').addClass('is-invalid');
                        $('#lessDiscount').focus();
                        $(this).val(getTotalAmt);
                    } else {
                        getBillSummary();
                        $('#lessDiscount').removeClass('is-invalid');
                    }
                });

                // Calcuate Base Price
                function calcuateBasePrice(mrp, ptr, gst, qty, free, bulkDis) {
                    var free_cf = 1 - (1 / ((1 + (gst / 100)) * (qty + free)));
                    var bulkDis_cf = 1 - (bulkDis / ((1 + (gst / 100)) * 100));

                    if (free == 0) { // Boundary condition
                        return ptr * bulkDis_cf;
                    }
                    return ptr * free_cf * bulkDis_cf;;
                }

            </script>

            <script>
                $(document).ready(function () {
                    var orgId = "<%=orgId%>";

                    function displayMappedData() {
                        // Retrieve and parse mappedData from session storage
                        var mappedData = JSON.parse(sessionStorage.getItem('mappedData') || '[]');

                        // Create a table element
                        var $table = $('<table>').addClass('table table-bordered h-100');

                        if (mappedData.length > 0) {
                            // Create the header row
                            var $thead = $('<thead>');
                            var $headerRow = $('<tr>');

                            // Add a header for the "Mapped Product" column
                            var $mappedProductHeader = $('<th>').text('Master Product');
                            $headerRow.append($mappedProductHeader);

                            // Use the keys from the first object as column headers (excluding the first key if it's used for mapping)
                            $.each(Object.keys(mappedData[0]), function (index, key) {
                                var $th = $('<th>').text(key);
                                $headerRow.append($th);
                            });
                            $thead.append($headerRow);
                            $table.append($thead);

                            // Create the body of the table
                            var $tbody = $('<tbody>');

                            // Add data rows
                            $.each(mappedData, function (index, row) {
                                var $tr = $('<tr>').attr('data-row-index', index);

                                // Create and append the "Mapped Product" input field
                                var $mappedProductTd = $('<td>').addClass('p-1');
                                var $inputParent = $('<div>').addClass('input-group has-validation');
                                var $input = $('<input>').attr({
                                    type: 'text',
                                    class: 'form-control',
                                    placeholder: 'Search product...',
                                    name: 'productname',
                                    'data-product-id': '',
                                    required: ''
                                });

                                $inputParent.append($input);
                                $mappedProductTd.append($inputParent);
                                $tr.append($mappedProductTd);

                                $.each(Object.values(row), function (index, value) {
                                    var $td = $('<td>').text(value);
                                    $tr.append($td);
                                });
                                $tbody.append($tr);
                            });
                            $table.append($tbody);

                            // Append the table to the container
                            var $container = $('#mappedDataTable');
                            $container.empty(); // Clear previous data
                            $container.append($table);

                            initializeAutocomplete();
                            getBillSummary();
                        } else {
                            // Reset summary to zero
                            $('#totalGross').val(0);
                            $('#lessDiscount').val(0);
                            $('#creditAmt').val(0);
                            $('#totalAmt').val(0);
                        }
                    }

                    function initializeAutocomplete() {
                        $("input[name='productname']").each(function () {
                            $(this).autocomplete({
                                minLength: 2,
                                source: function (request, response) {
                                    let query = request.term;
                                    $.ajax({
                                        url: `/api/autocomplete?query=${query}&orgId=${orgId}`,
                                        type: 'GET',
                                        success: function (ajaxResponse) {
                                            // Corrected filtering logic
                                            let results = ajaxResponse.filter(item => item.med_name.toLowerCase()).slice(0, 5);

                                            // Adding the default "Add item" option
                                            results.push({ med_name: `Add product "${query}"`, isNewItem: true });
                                            response(results);
                                        },
                                        error: function (error) {
                                            console.log(error);
                                        }
                                    });
                                },
                                select: function (event, ui) {
                                    if (ui.item.isNewItem) {
                                        // Handle the "Add item" case
                                        let newItem = ui.item.med_name.replace('Add product "', '').replace('"', '');
                                        $("#addProductModal").modal('show');
                                        $("#addProductModal #modalProductName").val(newItem);
                                    } else {
                                        // Handle the selection of an existing item
                                        $(this).val(ui.item.med_name).blur(); // Ensure the selected value is shown in the input

                                        let rowIndex = $(this).closest('[data-row-index]').data('row-index');
                                        let productId = ui.item.id;

                                        // Set the value of data attribute 'product-id' equal to productId
                                        $(this).data('product-id', productId);

                                        var mappedData = JSON.parse(sessionStorage.getItem('mappedData') || '[]');
                                        if (mappedData[rowIndex]) {
                                            mappedData[rowIndex].productId = productId;
                                        }

                                        // Save the updated mappedData back to session storage
                                        sessionStorage.setItem('mappedData', JSON.stringify(mappedData));

                                        return false;
                                    }
                                }
                            }).data('ui-autocomplete')._renderItem = function (ul, item) {
                                let li = $('<li>');
                                if (item.isNewItem) {
                                    li.css('background-color', 'rgba(105,108,255,.16)');
                                }
                                li.append('<div>' + item.med_name + (item.isNewItem ? '' : ' [' + item.pack_size + ']') + '</div>');
                                return li.appendTo(ul);
                            };

                            // Remove productId field on change
                            $(this).on('input', function () {
                                let rowIndex = $(this).closest('[data-row-index]').data('row-index');

                                // Remove product-id attribute
                                $(this).removeData('product-id');

                                var mappedData = JSON.parse(sessionStorage.getItem('mappedData') || '[]');
                                if (mappedData[rowIndex]) {
                                    delete mappedData[rowIndex].productId;
                                    sessionStorage.setItem('mappedData', JSON.stringify(mappedData));
                                }
                            })
                        });
                    }

                    // Call display function
                    displayMappedData();
                });
            </script>

            <script>
                $(document).ready(function () {
                    // Listen for the modal to be shown
                    $('#addProductModal').on('shown.bs.modal', function () {
                        function validateModalInputs() {
                            var isValid = true;
                            $('#addProductModal input[required]').each(function () {
                                if ($(this).val() === '') {
                                    $(this).addClass('is-invalid');
                                    isValid = false;
                                } else {
                                    $(this).removeClass('is-invalid');
                                }
                            });
                            return isValid;
                        }

                        // Attach validation logic to the 'Add' button within the modal
                        $('#addProductModal #addProductBtn').click(function (e) {
                            e.preventDefault();
                            if (validateModalInputs()) {
                                // Proceed with form submission or further logic here
                                const productData = {
                                    medName: $('#modalProductName').val(),
                                    mfdMkt: $('#modalBrandName').val(),
                                    salt: $('#modalSalt').val()
                                }

                                // Add the new product to the master database
                                $.ajax({
                                    url: `/api/v2/master/product/add-product?orgId=<%=orgId%>`,
                                    type: 'POST',
                                    data: JSON.stringify({ productData }),
                                    contentType: 'application/json',
                                    success: function (response) {
                                        // Close the modal
                                        $('#addProductModal').modal('hide');

                                        // Display a success message
                                        alert('Product added successfully!');

                                        // Refresh the autocomplete dropdown
                                        initializeAutocomplete();
                                    },
                                    error: function (error) {
                                        console.log(error);
                                        alert('Error in adding product');
                                    }
                                });
                            }
                        });
                    });
                });
            </script>

            <script>
                $(document).ready(function () {
                    var orgId = "<%=orgId%>";

                    // Hide validation messages on input
                    $('input').each(function () {
                        $(this).on('input', function () {
                            if ($(this).val() == '') {
                                $(this).addClass('is-invalid');
                            } else {
                                $(this).removeClass('is-invalid');
                            }
                        });
                    });
                    $('select:required').each(function () {
                        $(this).on('input', function () {
                            if ($(this).val() == 'default' || $(this).val() == null) {
                                $(this).addClass('is-invalid');
                            } else {
                                $(this).removeClass('is-invalid');
                            }
                        });
                    });

                    // Get the distributor details when the page loads
                    function getDistributorDetails(vendorId) {
                        $.get(`/api/v2/distributor/${vendorId}`, function (data, status) {
                            var vendorDetails = data.data;
                            console.log(vendorDetails);
                            vendorId = vendorDetails.vendor_id;

                            var number = `Contact: ${vendorDetails.vendor_contact}`
                            var email = `Email : ${vendorDetails.vendor_email}`
                            var dl_no = `DL No. : ${vendorDetails.vendor_dl_no_1}, ${vendorDetails.vendor_dl_no_2}`
                            var gstin = `GSTIN : ${vendorDetails.vendor_gstin}`
                            var address = `Address : ${vendorDetails.vendor_address}`

                            $("#contact").text(number);
                            $("#email").text(email);
                            $("#dl_no").text(dl_no);
                            $("#gstin").text(gstin);
                            $("#address").text(address);
                        });
                    }

                    // Event listener for changes in the vendor dropdown
                    var vendorId;
                    $('#vendorselect').change(function () {
                        var selectedVendorId = $(this).val();
                        vendorId = selectedVendorId;
                        getDistributorDetails(selectedVendorId);
                    });

                    // Event listener for changes in the payment method radio buttons
                    $('input[name="paymentMethod"]').change(function () {
                        // Check if the "Cash" radio button is selected
                        if ($('#cashRadio').is(':checked')) {
                            $('#creditPeriodInputBox').hide();
                            $('#lessDiscountBox').show();
                            $('#creditPeriodInput').val('');
                        } else {
                            $('#creditPeriodInputBox').show();
                            $('#lessDiscountBox').hide();
                        }
                    });


                    $("#uploadInventoryBtn").click(function (e) {

                        // Retrieve and parse mappedData from session storage
                        const cartDetails = JSON.parse(sessionStorage.getItem('mappedData') || '[]');

                        // Validations
                        e.preventDefault();
                        var isValid = true;
                        $('#mappedDataTable input:required:not(.modal input)').each(function () {
                            // Check if the input has a 'data-product-id' attribute with a non-empty value
                            if (typeof $(this).data('product-id') === 'undefined' || $(this).data('product-id') == '') {
                                $(this).addClass('is-invalid');
                                $(this).focus();
                                isValid = false;
                            }
                            else {
                                $(this).removeClass('is-invalid');
                                isValid = true;
                            }
                        });
                        $('select:required').each(function () {
                            if ($(this).val() == 'default' || $(this).val() == null) {
                                $(this).addClass('is-invalid');
                                $(this).focus();
                                isValid = false;
                            }
                            else {
                                $(this).removeClass('is-invalid');
                                isValid = true;
                            }
                        });

                        // Validations
                        if ($("#vendorselect").val() === 'default') {
                            $('#vendorselect').addClass('is-invalid');
                            $('#vendorselect').focus();
                            isValid = false;
                        }

                        if ($("#vendorinvoicenumber").val() == '') {
                            console.log($("#vendorinvoicenumber").val());
                            $("#vendorinvoicenumber").addClass('is-invalid');
                            $("#vendorinvoicenumber").focus();
                            isValid = false;
                        }

                        if ($("input[name='invoiceDate']").val() == '') {
                            $("input[name='invoiceDate']").addClass('is-invalid');
                            $("input[name='invoiceDate']").focus();
                            isValid = false;
                        }

                        if ($("#totalGross").val() == 0 || $("#totalGross").val() == '') {
                            $("#totalGross").addClass('is-invalid');
                            $("#totalGross").focus();
                            isValid = false;
                        }

                        if ($("#lessDiscount").val() == '') {
                            $("#lessDiscount").addClass('is-invalid');
                            $("#lessDiscount").focus();
                            isValid = false;
                        }

                        if (!$("#defaultCheck1").prop("checked")) {
                            return alert("Please check the disclaimer before submitting.");
                        }



                        if (isValid) {

                            $('#loader').show();

                            var lessDiscount = parseFloat($("#lessDiscount").val() || 0);
                            var creditDebit = parseFloat($("#creditAmt").val()) || 0;
                            var totalPurchase = 0;

                            purchaseItems = [];
                            for (let i in cartDetails) {
                                purchaseItems.push({
                                    productId: cartDetails[i].productId,
                                    gst: cartDetails[i].GST,
                                    hsn: cartDetails[i].HSN,
                                    primaryUnit: cartDetails[i].PriUnit,
                                    secondaryUnit: cartDetails[i].SecUnit,
                                    batchName: cartDetails[i].BatchName,
                                    expDate: cartDetails[i].ExpiryDate,
                                    conversion: cartDetails[i].Conversion,
                                    mrp: cartDetails[i].MRP,
                                    ptr: cartDetails[i].PTR,
                                    free: cartDetails[i].Free,
                                    bulkDiscount: cartDetails[i].DiscountPct,
                                    basePrice: cartDetails[i].basePrice,
                                    quantity: cartDetails[i].Quantity,
                                })
                                totalPurchase += parseFloat((cartDetails[i].Quantity) * cartDetails[i].PTR * (1 - cartDetails[i].DiscountPct / 100));
                            }

                            var purchaseData = {
                                vendorId: vendorId,
                                orgId: orgId,
                                vendorInvoice: $("#vendorinvoicenumber").val(),
                                invoiceDate: $("input[name='invoiceDate']").val(),
                                paymentMethod: $('input[name="paymentMethod"]:checked').val(),
                                creditPeriod: $("#creditPeriodInput").val() || 0,
                                totalGross: totalPurchase.toFixed(2),
                                lessDiscount: lessDiscount.toFixed(2),
                                creditDebit: creditDebit.toFixed(2),
                                purchaseItems,
                            }

                            /////////////////// version 2 ///////////////////////
                            $.ajax({
                                url: `/api/v2/uploadPurchaseBill?orgId=${orgId}`,
                                type: 'POST',
                                data: JSON.stringify(purchaseData),
                                contentType: 'application/json',
                                success: function (response) {
                                    grnInvoiceNo = response.data;
                                    $('#loader').hide();
                                    sessionStorage.removeItem("mappedData");
                                    window.location.href = `/grn_receipt/${grnInvoiceNo}`
                                },
                                error: function (error) {
                                    $('#loader').hide();
                                    console.log(error);
                                    alert('Error in adding inventory');
                                }
                            })
                        }
                    })
                })
            </script>

            <script>
                // Fetch categories from the API using jQuery
                $.get("/api/v2/all-category", function (response) {
                    // Get the select element
                    var categorySelect = $("#categorySelect");

                    // Populate the dropdown with options
                    $.each(response.data, function (index, category) {
                        categorySelect.append($('<option>', {
                            value: category.category_id,
                            text: category.category_name
                        }));
                    });
                }).fail(function (error) {
                    console.error("Error fetching categories:", error);
                });

                var secondaryOptions = {
                    STP: ['TAB', 'CAP'],
                    AMP: ['AMP', 'PCS'],
                    BOX: ['BOX', 'TAB', 'CAP', 'PCS', 'BTL', 'TUBE', 'DROP', 'DRSP', 'E/D', 'EAR/D', 'INJ', 'INH'],
                    BTL: ['BTL', 'PCS', 'TAB', 'CAP'],
                    TUBE: ['TUBE', 'PCS'],
                    DROP: ['DROP', 'PCS'],
                    DRSP: ['DRSP', 'PCS'],
                    "E/D": ['E/D', 'PCS'],
                    "EAR/D": ['EAR/D', 'PCS'],
                    INJ: ['INJ', 'PCS'],
                    INH: ['INH', 'PCS'],
                    PCS: ['PCS']
                };

                function populateSecondaryDropdown() {
                    // Clear existing options in the secondary dropdown
                    $('#secondaryDropdown').html('<option selected disabled>Select Secondary</option>');

                    // Get the selected value from the primary dropdown
                    var selectedValue = $('#primaryDropdown').val();

                    // Populate the secondary dropdown with options based on the selected value
                    if (selectedValue in secondaryOptions) {
                        $.each(secondaryOptions[selectedValue], function (index, option) {
                            $('#secondaryDropdown').append('<option value="' + option + '">' + option + '</option>');
                        });
                    }
                }

                // Event listener for changes in the primary dropdown
                $('#primaryDropdown').change(populateSecondaryDropdown);
            </script>


    </body>

    </html>