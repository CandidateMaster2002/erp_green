<%- include('../partials/headercode.ejs') %>

<style>
  @media(max-width: 768px) {
    .mob-view-from-to {
      display: inline;
    }
    .mob-view-from-to input {
      width: 100%;
    }
    .mob-view-from-to div {
      margin: 30px 0;
    }
    .mob {
      align-items: start;
      display: flex;
      justify-content: flex-start;
      align-items: flex-start !important;
    }
    .head-invoicelist {
      text-align: center;
    }
    .mob-view-search {
      width: 100% !important;
    }
    .mob-view {
      margin: 10px 0;
    }
  }
</style>

<body>
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <%- include('../partials/sidebar.ejs') %>
      <div class="layout-page">
        <%- include('../partials/navbar.ejs') %>
        <div class="content-wrapper">
          <div class="container-xxl flex-grow-1 container-p-y">
            <h4 class="fw-bold py-3 mb-1">Partywise In/Out</h4>
            <hr class="mb-4">

            <div id="loader" style="display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
              <div class="spinner-border spinner-border-lg text-primary" role="status" style="position: absolute; top: 50%; left: 50%;">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>

            <div>
              <div class="d-flex flex-column flex-md-row justify-content-between mb-3">
                <div class="card p-3 col-md-6 me-1 mob-view">
                  <div class="input-group has-validation">
                    <select class="form-select" id="partytypeselect" aria-label="Default select example">
                      <option selected>Select Party Type</option>
                      <option id="distopt">Distributor</option>
                      <option id="custopt">Customer</option>
                    </select>
                    <select class="form-select" id="partyselect" aria-label="Default select example">
                      <option selected>Select Party</option>
                    </select>
                    <div class="invalid-feedback">Please select a party.</div>
                  </div>
                </div>
                <div class="card p-3 col-md-6">
                  <div class="d-flex flex-column flex-md-row justify-content-between">
                    <div class="d-flex flex-column flex-md-row align-items-center me-md-3 mb-2 mb-md-0 mob">
                      <h5 class="mb-2 mb-md-0 me-md-2">From</h5>
                      <input class="form-control" type="date" id="from-date-input" name="fromdate" />
                    </div>
                    <div class="d-flex flex-column flex-md-row align-items-center mob">
                      <h5 class="mb-2 mb-md-0 me-md-2">To</h5>
                      <input class="form-control" type="date" id="to-date-input" name="todate" />
                    </div>
                  </div>
                </div>
              </div>

              <div class="text-center mb-4">
                <button type="button" class="btn btn-primary" id="generatereport">Generate Report</button>
              </div>

              <div class="card">
                <h5 class="card-header">Report</h5>
                <div class="card-body">
                  <div class="table-responsive text-nowrap">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th>Bill No.</th>
                          <th>Type</th>
                          <th>Date</th>
                          <th>Product</th>
                          <th>Receive</th>
                          <th>Issue</th>
                        </tr>
                      </thead>
                      <tbody id="reportcart"></tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="content-backdrop fade"></div>
        </div>
      </div>

      <div class="layout-overlay layout-menu-toggle"></div>
    </div>
  </div>

  <%- include('../partials/footercode.ejs') %>
 <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
 <!-- jQuery UI is not strictly needed for just dropdowns, but keeping it if other parts rely on it -->
 <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
 <script>
  $(document).ready(function () {
    const orgId = '<%= orgId %>';
    console.log("Partywise In/Out Script loaded. orgId:", orgId);

    // --- Initial Date Setup ---
    const today = new Date();
    const dd = String(today.getDate()).padStart(2, '0');
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const currentFullYear = today.getFullYear();
    const formattedToday = `${currentFullYear}-${mm}-${dd}`;
    $("input[name='fromdate']").val(formattedToday);
    $("input[name='todate']").val(formattedToday);

    let selectedPartyId = null; // Initialize selected party ID

    // --- Helper function for clearing/adding invalid state ---
    function toggleInvalid(element, isValid) {
      if (isValid) {
        $(element).removeClass('is-invalid');
      } else {
        $(element).addClass('is-invalid');
      }
    }

    // --- Functions to Fetch and Populate Party Dropdowns ---
    function populatePartySelect(parties, type) {
      const $partySelect = $('#partyselect');
      $partySelect.empty();
      $partySelect.append('<option value="" selected>Select Party</option>'); // Add default empty option

      if (parties && parties.length > 0) {
        parties.forEach(function(party) {
          let option;
          if (type === 'distributor') {
            option = `<option value="${party.vendor_id}">${party.vendor_name}</option>`;
          } else if (type === 'customer') {
            option = `<option value="${party.customer_id}">${party.cust_name}</option>`;
          }
          $partySelect.append(option);
        });
      } else {
        $partySelect.append('<option value="" disabled>No parties found</option>');
      }
      toggleInvalid($partySelect, true); // Reset validation state
      selectedPartyId = null; // Reset selected party ID
    }

    function fetchDistributors() {
      console.log("Fetching distributors...");
      $.ajax({
        url: '/api/v2/get-all-distributor', // Existing backend endpoint
        type: 'GET',
        data: { org: orgId },
        success: function(response) {
          console.log("Distributors response:", response);
          // Assuming response.data contains the array of distributors
          const distributors = response.data || []; 
          populatePartySelect(distributors, 'distributor');
        },
        error: function(jqXHR, textStatus, errorThrown) {
          console.error("Error fetching distributors:", textStatus, errorThrown, jqXHR);
          populatePartySelect([], 'distributor'); // Populate with empty list on error
          toggleInvalid($('#partyselect'), false); // Indicate error visually
          // You might want to display a user-friendly error message in the dropdown or nearby
        }
      });
    }

    function fetchCustomers() {
      console.log("Fetching customers...");
      $.ajax({
        url: `/api/v2/org/${orgId}/customers`, // Existing backend endpoint
        type: 'GET',
        data: { org: orgId },
        success: function(response) {
          console.log("Customers response:", response);
          // Assuming response.data contains the array of customers
          const customers = response.data || []; 
          populatePartySelect(customers, 'customer');
        },
        error: function(jqXHR, textStatus, errorThrown) {
          console.error("Error fetching customers:", textStatus, errorThrown, jqXHR);
          populatePartySelect([], 'customer'); // Populate with empty list on error
          toggleInvalid($('#partyselect'), false); // Indicate error visually
          // You might want to display a user-friendly error message in the dropdown or nearby
        }
      });
    }

    // --- Event Listener for Party Type Selection ---
    $('#partytypeselect').change(function () {
      const selectedPartyType = $(this).find('option:selected').text();
      console.log("Selected Party Type:", selectedPartyType);
      
      // Clear previous party selection and validation
      $('#partyselect').empty().append('<option value="" selected>Select Party</option>');
      selectedPartyId = null;
      toggleInvalid($('#partyselect'), true);

      if (selectedPartyType === 'Distributor') {
        fetchDistributors();
        toggleInvalid($('#partytypeselect'), true);
      } else if (selectedPartyType === 'Customer') {
        fetchCustomers();
        toggleInvalid($('#partytypeselect'), true);
      } else {
        // If "Select Party Type" is chosen again
        toggleInvalid($('#partytypeselect'), false); // Show invalid state
      }
    });

    // --- Event Listener for Party Selection ---
    $('#partyselect').change(function () {
      selectedPartyId = $(this).val();
      console.log("Selected Party ID:", selectedPartyId);
      toggleInvalid($('#partyselect'), selectedPartyId !== ''); // Add/remove invalid class
    });

    // --- Input Validation for Date Fields (Existing) ---
    $('input[type="date"]').on('input', function () {
      toggleInvalid(this, $(this).val() !== '');
    });

    // --- Generate Report Button Click Handler ---
    $("#generatereport").click(function (e) {
      e.preventDefault();
      let isValid = true;

      const selectedPartyType = $('#partytypeselect').find('option:selected').text();
      const fromDate = $("input[name='fromdate']").val();
      const toDate = $("input[name='todate']").val();

      // Validation checks
      if (selectedPartyType === 'Select Party Type' || selectedPartyType === '') {
        toggleInvalid($('#partytypeselect'), false);
        isValid = false;
      } else {
        toggleInvalid($('#partytypeselect'), true);
      }

      if (!selectedPartyId || selectedPartyId === '') {
        toggleInvalid($('#partyselect'), false);
        isValid = false;
      } else {
        toggleInvalid($('#partyselect'), true);
      }

      if (fromDate === '') {
        toggleInvalid($("input[name='fromdate']"), false);
        isValid = false;
      } else {
        toggleInvalid($("input[name='fromdate']"), true);
      }

      if (toDate === '') {
        toggleInvalid($("input[name='todate']"), false);
        isValid = false;
      } else {
        toggleInvalid($("input[name='todate']"), true);
      }

      if (fromDate > toDate) {
        toggleInvalid($("input[name='fromdate']"), false);
        toggleInvalid($("input[name='todate']"), false);
        isValid = false;
      }

      if (isValid) {
        $('#loader').show();
        $("#reportcart").empty(); // Clear previous report content

        $.ajax({
          url: `/api/v2/reports/partyTransactions`, // Endpoint to get partywise transactions
          type: 'POST',
          data: JSON.stringify({
            orgId: orgId,
            partyId: selectedPartyId,
            partyType: selectedPartyType.toLowerCase(), // Ensure lowercase for backend consistency
            startDate: fromDate,
            endDate: toDate
          }),
          contentType: 'application/json',
          success: function (response) {
            $('#loader').hide();
            console.log("Party Transactions Report Response:", response);

            // --- CRITICAL: Robust data access based on expected backend nesting ---
            // This handles the deep nesting like { data: { data: { data: { data: [...] } } } }
            let items = [];
            if (Array.isArray(response.data)) {
              items = response.data;
            } else {
              console.warn("Unexpected data structure in partyTransactions response:", response);
            }


            if (items.length > 0) {
              for (let i = 0; i < items.length; i++) {
                const billNo = items[i].bill_no || '-';
                const transactionType = items[i].transaction_type || '-';
                const transactionDate = moment(items[i].transaction_date).format('DD MMMM YYYY') || '-'; // Corrected format string
                const productName = items[i].product_name || '-';
                
                const priReceived = items[i].pri_received_quantity || 0;
                const secReceived = items[i].sec_received_quantity || 0;
                const receivedQty = (priReceived === 0 && secReceived === 0) ? '-' : `${priReceived} : ${secReceived}`;
                
                const priIssued = items[i].pri_issued_quantity || 0;
                const secIssued = items[i].sec_issued_quantity || 0;
                const issuedQty = (priIssued === 0 && secIssued === 0) ? '-' : `${priIssued} : ${secIssued}`;

                const htmlData = `
                  <tr>
                    <td><i class="fab fa-angular fa-lg text-danger me-3"></i><strong>${billNo}</strong></td>
                    <td>${transactionType}</td>
                    <td>${transactionDate}</td>
                    <td>${productName}</td>
                    <td>${receivedQty}</td>
                    <td>${issuedQty}</td>
                  </tr>`;
                $("#reportcart").append(htmlData);
              }
            } else {
              $("#reportcart").empty().append('<tr><td colspan="6" class="text-center">No transactions found for the selected party and date range.</td></tr>');
            }
          },
          error: function (jqXHR, textStatus, errorThrown) {
            $('#loader').hide();
            console.error("AJAX Error for Party Transactions Report:", textStatus, errorThrown, jqXHR);
            $("#reportcart").empty().append('<tr><td colspan="6" class="text-center text-danger">Error loading report. Please try again.</td></tr>');
          }
        });
      }
    });
  });
 </script>


      <style>
        @media (max-width: 767px) {

          .card-body.d-flex .row.w-100 {
            flex-direction: row;
            /* Ensure row direction */
            justify-content: start;
            /* Center the content */
            align-items: flex-start;
          }

          .col-6 {
            flex: 0 0 50%;
            /* Make each input take up 50% of the width */
            max-width: 50%;

          }

          .text-center select {
            width: 100%;
            /* Ensure the select input takes full width */
          }

          .card-header {
            font-size: 0.75em;
            /* Adjust the font size as needed */
            display: flex;
            justify-content: flex-start;
            /* Align content to the left */
            align-items: flex-start;
            padding: 10px;
          }

          .card-header input {
            margin-right: 0.5rem;
          }
        }
      </style>

</body>
</html>