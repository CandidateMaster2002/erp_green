<%- include('../partials/headercode.ejs') %>

  <style>
    @media(max-width: 768px) {

      .mob-view-from-to {
        display: inline;
      }

      .mob-view-from-to input {
        width: 100%;
      }

      .mob-view-from-to div {
        margin: 30px 0;
      }

      .mob {
        align-items: start;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start !important;
      }

      .head-invoicelist {
        text-align: center;
      }

      .mob-view-search {
        width: 100% !important;

      }

      .mob-view {
        margin: 10px 0;
      }
    }


   /* .mob-view-search {
      width: 62%;

    }*/
  </style>

  <body>

    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar  ">
      <div class="layout-container">

        <!-- sidebar imported -->
        <%- include('../partials/sidebar.ejs') %>

          <!-- Layout container -->
          <div class="layout-page">

            <!-- navbar imported -->
            <%- include('../partials/navbar.ejs') %>

              <!-- Content wrapper -->
              <div class="content-wrapper">

                <!-- Content -->

                <div class="container-xxl flex-grow-1 container-p-y">

                  <h4 class="fw-bold py-3 mb-1">Itemwise In/Out</h4>
                  <hr class="mb-4">

                  <!-- Loader GIF -->
                  <div id="loader"
                    style="display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
                    <div class="spinner-border spinner-border-lg text-primary" role="status"
                      style="position: absolute; top: 50%; left: 50%;">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>

                  <div>

                    <div class="d-flex flex-column flex-md-row justify-content-between mb-3">
                      <!-- <h5 class="mb-2 mb-md-0 head-invoicelist">Invoice List</h5> -->
                      <div class="card p-3 col-md-6 me-1 mob-view">
                        <div class="input-group has-validation position-relative" >

                          <input class="form-control" type="text" placeholder="Search product.." id="medicinename"
                            aria-label="Search">
                          <div class="invalid-feedback">
                            Please select a product.
                          </div>
                          <!-- NEW: Autocomplete results container -->
                          <div id="product-suggestions" class="list-group position-absolute w-100 bg-white border border-top-0 rounded-bottom" style="z-index: 1000; max-height: 200px; overflow-y: auto; display: none;">
                              <!-- Suggestions will be dynamically inserted here -->
                          </div>
                        </div>
                        <!-- Hidden input to store the selected product's ID -->
                        <input type="hidden" id="selected-product-id" name="productId" value="">
                      </div>

                      <!-- <div class="text-center mb-4"> -->

                      <!-- </div> -->
                      <div class="card p-3 col-md-6">
                        <div class="d-flex flex-column flex-md-row justify-content-between">
                          <div class="d-flex flex-column flex-md-row align-items-center me-md-3 mb-2 mb-md-0 mob">
                            <h5 class="mb-2 mb-md-0 me-md-2">From</h5>
                            <input class="form-control" type="date" id="from-date-input" name="fromdate" />
                          </div>
                          <div class="d-flex flex-column flex-md-row align-items-center mob">
                            <h5 class="mb-2 mb-md-0 me-md-2">To</h5>
                            <input class="form-control" type="date" id="to-date-input" name="todate" />
                          </div>
                        </div>
                      </div>
                    </div>


                    <div class="text-center mb-4">
                      <button type="button" class="btn btn-primary" id="generatereport">Generate Report</button>
                    </div>

                    <!-- Report List -->

                    <div class="card">
                      <h5 class="card-header">Report</h5>
                      <div class="card-body">
                        <div class="table-responsive text-nowrap">
                          <table class="table table-bordered">
                            <thead>
                              <tr>
                                <th>Bill No.</th>
                                <th>Type</th>
                                <th>Date</th>
                                <th>Party</th>
                                <th>Receive</th>
                                <th>Issue</th>
                                <!-- <th>Balance</th> -->
                              </tr>
                            </thead>
                            <tbody id="reportcart">
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>

                    <!-- / Report List -->


                  </div>
                </div>
                <!-- / Content -->

                <div class="content-backdrop fade"></div>
              </div>
              <!-- Content wrapper -->
          </div>
          <!-- / Layout page -->
      </div>



      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>


    </div>
    <!-- / Layout wrapper -->

    <%- include('../partials/footercode.ejs') %>
      <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
      <!-- Ensure jQuery UI is loaded, as the current code uses it. If not, this line is needed. -->
      <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script> 
      <script>

        $(document).ready(function () {

          // --- Input Validation Hiding Logic (Existing) ---
          $('input').each(function () {
            $(this).on('input', function () {
              if ($(this).val() === '') { // Use strict equality
                $(this).addClass('is-invalid');
              } else {
                $(this).removeClass('is-invalid');
              }
            });
          });

          // --- Autocomplete for Product Search (Integrated with Typesense Backend) ---
          $('#medicinename').autocomplete({
            minLength: 2, // Start search after 2 characters (adjustable)
            source: function (request, response) {
              const queryTerm = request.term;
              const orgId = "<%=orgId%>"; // Get orgId from EJS context

              // Clear previously selected product ID if user starts typing again
              $("#selected-product-id").val(''); 
              $("#medicinename").removeClass('is-invalid'); // Clear validation on new input

              if (queryTerm.length < this.options.minLength) {
                response([]); // Don't search if query is too short
                $("#product-suggestions").hide().empty(); // Hide and clear suggestions
                return;
              }

              // Make AJAX call to your backend Typesense search endpoint
              // The backend controller itemSearch is mapped to /api/v2/item-search
              $.get(`/api/autocomplete?orgId=${orgId}&query=${encodeURIComponent(queryTerm)}`, function (data) {
                console.log("Typesense search response data:", data); // Debug: Check raw response

                // The backend controller (api.itemsearch.controllers.js) is designed
                // to return a filtered array of documents directly (res.json(filteredDocuments)).
                // So, 'data' should directly be the array of products.
                const results = data || []; 

                if (results.length > 0) {
                  // Map results to jQuery UI Autocomplete expected format (label, value)
                  // And also pass the original item for easy access in 'select'
                  response(results.map(item => ({
                    label: `${item.med_name} (${item.salt_composition || 'N/A'})`, // Text displayed in suggestion
                    value: item.med_name, // Value put into input field on selection
                    originalItem: item // Store the full item for product_id
                  })));
                } else {
                  response([]); // No results
                }
              }).fail(function (jqXHR, textStatus, errorThrown) {
                console.error("Error during product search:", textStatus, errorThrown, jqXHR);
                response([]); // Return empty on error
              });
            },
            select: function (event, ui) {
              // This is called when an item is selected from the suggestions
              // Using setTimeout to allow the default select behavior to finish first
              setTimeout(function () {
                console.log('Selected product:', ui.item.originalItem);
                
                // Set the visible input field to the selected product's name
                $("#medicinename").val(ui.item.originalItem.med_name);

                // Set the hidden input field with the actual product ID
                // The item from Typesense has 'id' as the product ID
                $("#selected-product-id").val(ui.item.originalItem.id); 
                
                $("#medicinename").removeClass('is-invalid'); // Clear any validation
                // No need to manually hide suggestions as jQuery UI Autocomplete handles this on select.
              }, 0);
            },
            // Custom rendering for suggestions (optional, but good for custom display)
            // This is largely replicating your existing _renderItem logic
            _renderItem: function (ul, item) {
                return $("<li>")
                    .append(`<div>${item.originalItem.med_name} (${item.originalItem.salt_composition || 'N/A'})</div>`)
                    .appendTo(ul);
            },
            // Handle clearing selected-product-id if user manually edits the input after selection
            change: function(event, ui) {
                if (ui.item === null) { // If user types something not in list or clears it
                    $("#selected-product-id").val('');
                    console.log("Product input changed, selected ID cleared.");
                }
            }
          });

          // --- Default Date Range Setup (Existing) ---
          var today = new Date();
          var dd = String(today.getDate()).padStart(2, '0');
          var mm = String(today.getMonth() + 1).padStart(2, '0');
          var yyyy = today.getFullYear();
          today = yyyy + '-' + mm + '-' + dd;
          $("input[name='fromdate']").val(today);
          $("input[name='todate']").val(today);

          // --- Generate Report Button Click Handler ---
          $("#generatereport").click(function (e) {
            e.preventDefault(); // Prevent default form submission
            let isValid = true;

            const fromDate = $("input[name='fromdate']").val();
            const toDate = $("input[name='todate']").val();
            // Get the selected product ID from the hidden input
            const selectedProductId = $("#selected-product-id").val(); 

            // Validate product selection using the hidden ID
            if ($("#medicinename").val() === '' || !selectedProductId) { // Check both text and hidden ID
              $("#medicinename").addClass('is-invalid');
              $("#medicinename").focus();
              isValid = false;
            } else {
              $("#medicinename").removeClass('is-invalid');
            }

            if (fromDate === '') { // Use strict equality
              $("input[name='fromdate']").addClass('is-invalid');
              $("input[name='fromdate']").focus();
              isValid = false;
            } else {
              $("input[name='fromdate']").removeClass('is-invalid');
            }

            if (toDate === '') { // Use strict equality
              $("input[name='todate']").addClass('is-invalid');
              $("input[name='todate']").focus();
              isValid = false;
            } else {
              $("input[name='todate']").removeClass('is-invalid');
            }

            if (fromDate > toDate) {
              $("input[name='fromdate']").addClass('is-invalid');
              $("input[name='todate']").addClass('is-invalid');
              // No focus here as both are invalid, might conflict
              isValid = false;
            } else {
              $("input[name='fromdate']").removeClass('is-invalid');
              $("input[name='todate']").removeClass('is-invalid');
            }

            if (isValid) {
              // Show loader
              $('#loader').show();

              // Make AJAX call to get product transactions (Itemwise In/Out report data)
              $.ajax({
                url: `/api/v2/reports/productTransactions`, // Your backend endpoint for this report
                type: 'POST', // As per your existing code
                data: JSON.stringify({
                  orgId: "<%=orgId%>", // Passed from EJS
                  productId: selectedProductId, // Use the ID from the hidden input
                  startDate: fromDate,
                  endDate: toDate
                }),
                contentType: 'application/json',
                success: function (response) {
                  $('#loader').hide();
                  $("#reportcart").empty(); // Clear existing report data

                  console.log("Product Transactions Report Response:", response); // Debug response

                  // --- CRITICAL: Adjust data access based on backend's nesting ---
                  // Assuming the productTransactions endpoint will follow a similar nesting
                  // as your other dummy data services (e.g., data.data.data.data.data)
                  let items = [];
                  if (Array.isArray(response?.data?.data?.data?.data?.data)) {
                    items = response.data.data.data.data.data;
                  } else if (Array.isArray(response?.data?.data?.data)) {
                    items = response.data.data.data;
                  } else if (Array.isArray(response?.data)) {
                    items = response.data;
                  } else if (Array.isArray(response)) {
                    items = response;
                  }
                  if (items && items.length > 0) {
                    for (let i = 0; i < items.length; i++) {
                      // Adjust field names if needed based on the actual dummy data structure
                      const billNo = items[i].bill_no === '0' ? '-' : items[i].bill_no;
                      const transactionType = items[i].transaction_type;
                      const transactionDate = moment(items[i].transaction_date).format('DD MMMM YYYY');
                      const partyName = items[i].party_name === '0' ? '-' : items[i].party_name;
                      
                      const priReceived = items[i].pri_received_quantity || 0;
                      const secReceived = items[i].sec_received_quantity || 0;
                      const receivedQty = (priReceived === 0 && secReceived === 0) ? '-' : `${priReceived} : ${secReceived}`;
                      
                      const priIssued = items[i].pri_issued_quantity || 0;
                      const secIssued = items[i].sec_issued_quantity || 0;
                      const issuedQty = (priIssued === 0 && secIssued === 0) ? '-' : `${priIssued} : ${secIssued}`;

                      var htmlData = `
                        <tr>
                          <td><i class="fab fa-angular fa-lg text-danger me-3"></i><strong>${billNo}</strong></td>
                          <td>${transactionType}</td>
                          <td>${transactionDate}</td>
                          <td>${partyName}</td>
                          <td>${receivedQty}</td>
                          <td>${issuedQty}</td>
                        </tr>`;
                      $("#reportcart").append(htmlData);
                    }
                  } else {
                    $("#reportcart").empty().append('<tr><td colspan="6" class="text-center">No transactions found for the selected product and date range.</td></tr>');
                  }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                  $('#loader').hide();
                  console.error("AJAX Error for Product Transactions Report:", textStatus, errorThrown, jqXHR);
                  // Provide a user-friendly message in the report table
                  $("#reportcart").empty().append('<tr><td colspan="6" class="text-center text-danger">Error loading report. Please try again.</td></tr>');
                }
              });
            }
          });
        });
      </script>


      <style>
        @media (max-width: 767px) {

          .card-body.d-flex .row.w-100 {
            flex-direction: row;
            /* Ensure row direction */
            justify-content: start;
            /* Center the content */
            align-items: flex-start;
          }

          .col-6 {
            flex: 0 0 50%;
            /* Make each input take up 50% of the width */
            max-width: 50%;

          }

          .text-center select {
            width: 100%;
            /* Ensure the select input takes full width */
          }

          .card-header {
            font-size: 0.75em;
            /* Adjust the font size as needed */
            display: flex;
            justify-content: flex-start;
            /* Align content to the left */
            align-items: flex-start;
            padding: 10px;
          }

          .card-header input {
            margin-right: 0.5rem;
          }
        }
      </style>

  </body>


  </html>