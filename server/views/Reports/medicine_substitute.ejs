<%- include('../partials/headercode.ejs') %>

  <style>
    @media(max-width: 768px) {

      .mob-view-from-to {
        display: inline;
      }

      .mob-view-from-to input {
        width: 100%;
      }

      .mob-view-from-to div {
        margin: 30px 0;
      }

      .mob {
        align-items: start;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start !important;
      }

      .head-invoicelist {
        text-align: center;
      }

      .mob-view-search {
        width: 100% !important;

      }

      .mob-view {
        margin: 10px 0;
      }
    }


    /* .mob-view-search {
      width: 62%;

    }*/
  </style>

<body>

    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar  ">
      <div class="layout-container">

        <!-- sidebar imported -->
        <%- include('../partials/sidebar.ejs') %>

          <!-- Layout container -->
          <div class="layout-page">

            <!-- navbar imported -->
            <%- include('../partials/navbar.ejs') %>

              <!-- Content wrapper -->
              <div class="content-wrapper">

                <!-- Content -->

                <div class="container-xxl flex-grow-1 container-p-y">

                  <h4 class="fw-bold py-3 mb-1">Search alternatives</h4>
                  <hr class="mb-4">

                  <!-- Loader GIF -->
                  <div id="loader"
                    style="display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
                    <div class="spinner-border spinner-border-lg text-primary" role="status"
                      style="position: absolute; top: 50%; left: 50%;">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                  </div>

                  <div class="row">

                    <div class="col-md-6">
                      <div class="card mb-4">
                        <div class="card-body p-3">
                          <div class="input-group has-validation position-relative"> <!-- ADDED: position-relative -->
                           <input class="form-control" type="text" placeholder="Search product .." id="medicinename" aria-label="Search">
                           <div class="invalid-feedback">
                               Please select a product.
                           </div>
                           <!-- NEW: Autocomplete results container -->
                           <div id="product-suggestions" class="list-group position-absolute w-100 bg-white border border-top-0 rounded-bottom" style="z-index: 1000; max-height: 200px; overflow-y: auto; display: none;">
                               <!-- Suggestions will be dynamically inserted here -->
                           </div>
                          </div>
                        </div>
                      </div>
                      <!-- NEW: Hidden input to store the selected product's ID -->
                      <input type="hidden" id="selected-product-id" name="productId" value="">
                    </div>

                    <div class="col-md-6">
                      <div class="card mb-4 px-2">
                        <h6 class="card-header p-2" id="brand">Brand: <span id="selected-product-brand">N/A</span></h6> <!-- ADDED span with ID -->
                        <h6 class="card-header p-2" id="salt">Salt: <span id="selected-product-salt">N/A</span></h6>   <!-- ADDED span with ID -->
                      </div>
                    </div>

                  </div>


                  <div class="row justify-content-between mb-3">
                    <div class="text-center mt-3">
                      <button type="button" class="btn btn-primary" id="generatereport">Get Alternatives</button>
                    </div>
                  </div>

                  <!-- Report List -->

                  <div class="card">
                    <h5 class="card-header">Report</h5>
                    <div class="card-body">
                      <div class="table-responsive text-nowrap">
                        <table class="table table-bordered">
                          <thead>
                            <tr>
                              <th>Product Name</th>
                              <th>Brand</th>
                              <th>Batch</th>
                              <th>Expiry</th>
                              <th>MRP</th>
                              <th>PTR</th>
                              <th>Stock</th>
                            </tr>
                          </thead>
                          <tbody id="reportcart">
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>

                  <!-- / Report List -->


                </div>
              </div>
              <!-- / Content -->

              <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
      </div>
      <!-- / Layout page -->
    </div>



    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>


    </div>
    <!-- / Layout wrapper -->

    <%- include('../partials/footercode.ejs') %>
  <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
  <script>

    $(document).ready(function () {
      const orgId = '<%= orgId %>'; // Get orgId from EJS context
      console.log("Alternative Report Script loaded. orgId:", orgId);

      // --- Helper function for clearing/adding invalid state ---
      function toggleInvalid(element, isValid) {
        if (isValid) {
          $(element).removeClass('is-invalid');
        } else {
          $(element).addClass('is-invalid');
        }
      }

      // --- Autocomplete for Product Search (Integrated with Typesense Backend) ---
      $('#medicinename').autocomplete({
        minLength: 2, // Start search after 2 characters (adjustable)
        source: function (request, response) {
          const queryTerm = request.term;

          // Clear previously selected product ID and Brand/Salt info if user starts typing again
          $("#selected-product-id").val('');
          $("#selected-product-brand").text('N/A');
          $("#selected-product-salt").text('N/A');
          toggleInvalid($("#medicinename"), true); // Clear validation on new input

          if (queryTerm.length < this.options.minLength) {
            response([]); // Don't search if query is too short
            // If you have a suggestions container like #product-suggestions, you'd hide it here:
            // $("#product-suggestions").hide().empty();
            return;
          }

          // Make AJAX call to your backend Typesense search endpoint
          // Using /api/autocomplete as per your backend route definition
          $.get(`/api/autocomplete?orgId=${orgId}&query=${encodeURIComponent(queryTerm)}`, function (data) {
            console.log("Typesense search response data:", data); // Debug: Check raw response

            // The backend controller (api.itemsearch.controllers.js) is designed
            // to return a filtered array of documents directly (res.json(filteredDocuments)).
            // So, 'data' should directly be the array of products.
            const results = data || [];

            if (results.length > 0) {
              // Map results to jQuery UI Autocomplete expected format (label, value)
            // And also pass the original item for easy access in 'select'
              response(results.map(item => ({
                label: `${item.med_name} (${item.salt_composition || 'N/A'}) - ${item.mfd_mkt || 'N/A'}`, // Text displayed in suggestion
              value: item.med_name, // Value put into input field on selection
                originalItem: item // Store the full item for product_id, brand, salt
              })));
            } else {
              response([]); // No results
            }
          }).fail(function (jqXHR, textStatus, errorThrown) {
            console.error("Error during product search:", textStatus, errorThrown, jqXHR);
            response([]); // Return empty on error
            // Optionally, display a user-friendly error message near the search box
        });
        },
      select: function (event, ui) {
          // This is called when an item is selected from the suggestions
          // Using setTimeout to allow the default select behavior to finish first
          setTimeout(function () {
            console.log('Selected product:', ui.item.originalItem);
            
            // Set the visible input field to the selected product's name
            $("#medicinename").val(ui.item.originalItem.med_name);

            // Set the hidden input field with the actual product ID
            $("#selected-product-id").val(ui.item.originalItem.id); 
            
            // Populate Brand and Salt spans
            $("#selected-product-brand").text(ui.item.originalItem.mfd_mkt || 'N/A');
            $("#selected-product-salt").text(ui.item.originalItem.salt_composition || 'N/A');

            toggleInvalid($("#medicinename"), true); // Clear any validation
            // No need to manually hide suggestions as jQuery UI Autocomplete handles this on select.
          }, 0);
      },
        // Custom rendering for suggestions (optional, but good for custom display)
        _renderItem: function (ul, item) {
          return $("<li>")
                .append(`<div>${item.originalItem.med_name} (${item.originalItem.salt_composition || 'N/A'}) <br><small>${item.originalItem.mfd_mkt || 'N/A'}</small></div>`)
                .appendTo(ul);
      },
      // Handle clearing selected-product-id and Brand/Salt if user manually edits the input after selection
        change: function(event, ui) {
            if (ui.item === null) { // If user types something not in list or clears it
                $("#selected-product-id").val('');
                $("#selected-product-brand").text('N/A');
                $("#selected-product-salt").text('N/A');
                console.log("Product input changed, selected ID and details cleared.");
            }
        }
      });

      // --- On input medicine name clear all relevant fields (Existing with updates) ---
      // This event listener will now also clear the hidden product ID and the Brand/Salt spans
      $("#medicinename").on('input', function () {
        $("#selected-product-id").val(''); // Clear hidden ID
        $("#selected-product-brand").text('N/A'); // Clear brand
        $("#selected-product-salt").text('N/A'); // Clear salt
        $("#reportcart").empty(); // Clear report table
        toggleInvalid(this, $(this).val() !== ''); // Update validation based on current input value
      });

      // --- "Get Alternatives" Button Click Handler ---
      $("#generatereport").click(function (e) {
        e.preventDefault();
        let isValid = true;

        const selectedProductId = $("#selected-product-id").val(); // Get ID from hidden input

        // Validate product selection using the hidden ID
        if ($("#medicinename").val() === '' || !selectedProductId) { 
          toggleInvalid($("#medicinename"), false); // Add invalid class
          $("#medicinename").focus();
          isValid = false;
        } else {
          toggleInvalid($("#medicinename"), true); // Remove invalid class
        }

        if (isValid) {
          // Show loader
          $('#loader').show();
          $("#reportcart").empty(); // Clear existing report data

          // Make AJAX call to get alternative products
          // This endpoint will need to return dummy data from backend service
          $.ajax({
            url: `/api/v2/org/${orgId}/product/${selectedProductId}/salt-alternatives`,
            type: 'GET', // As per your existing code
            // No contentType needed for GET requests usually, but doesn't hurt.
            // contentType: 'application/json', 
            success: function (response) {
              $('#loader').hide();
              console.log("Alternative Products Report Response:", response); // Debug response

              // --- CRITICAL: Robust data access based on expected backend nesting ---
              // Assuming the salt-alternatives endpoint will follow a similar nesting
              // as your other dummy data services (e.g., data.data.data.data.data)
              let items = [];
              if (Array.isArray(response.data)) {
                items = response.data;
              } else {
                console.warn("Unexpected response format for salt alternatives:", response);
              }
              if ( items.length > 0) {
                for (let i = 0; i < items.length; i++) {
                  // Accessing properties based on typical product/alternative data structure
                  const productName = items[i].med_name || '-';
                  const brand = items[i].mfd_mkt || '-';
                  const batch = items[i].batch_name || '-';
                  const expiry = items[i].exp_date ? moment(items[i].exp_date).format('MM/YYYY') : '-';
                  const mrp = items[i].mrp || '-';
                  const ptr = items[i].purchase_rate || '-';
                  const stock = items[i].remPriQty !== undefined && items[i].remSecQty !== undefined 
                                ? `${items[i].remPriQty} : ${items[i].remSecQty}` : '-';

                  const htmlData = `
                  <tr>
                      <td><i class="fab fa-angular fa-lg text-danger me-3"></i><strong>${productName}</strong></td>
                      <td>${brand}</td>
                      <td>${batch}</td>
                      <td>${expiry}</td>
                      <td>${mrp}</td>
                      <td>${ptr}</td>
                      <td>${stock}</td>
                    </tr>`;
                  $("#reportcart").append(htmlData);
                }
              } else {
                $("#reportcart").empty().append('<tr><td colspan="7" class="text-center">No alternatives found for the selected product.</td></tr>');
              }
            },
            error: function (jqXHR, textStatus, errorThrown) {
              $('#loader').hide();
              console.error("AJAX Error for Alternatives Report:", textStatus, errorThrown, jqXHR);
              $("#reportcart").empty().append('<tr><td colspan="7" class="text-center text-danger">Error loading alternatives. Please try again.</td></tr>');
            }
          });
        }
      });
    });
  </script>


      <style>
        @media (max-width: 767px) {

          .card-body.d-flex .row.w-100 {
            flex-direction: row;
            /* Ensure row direction */
            justify-content: start;
            /* Center the content */
            align-items: flex-start;
          }

          .col-6 {
            flex: 0 0 50%;
            /* Make each input take up 50% of the width */
            max-width: 50%;

          }

          .text-center select {
            width: 100%;
            /* Ensure the select input takes full width */
          }

          .card-header {
            font-size: 0.75em;
            /* Adjust the font size as needed */
            display: flex;
            justify-content: flex-start;
            /* Align content to the left */
            align-items: flex-start;
            padding: 10px;
          }

          .card-header input {
            margin-right: 0.5rem;
          }
        }
      </style>

</body>


</html>